// –ó–∞–¥–∞–Ω–∏–µ1: –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
// –ù–∞ –≤—Ö–æ–¥–µ: –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, –ª—é–±–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
// –ù–∞ –≤—ã—Ö–æ–¥–µ: —Å—Ç—Ä–æ–∫–∞, —Å —Ç–∏–ø–æ–º –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞

function getType(inp) {
  return typeof inp;
}

console.log(getType(530));
console.log(getType("da"));

// –ó–∞–¥–∞–Ω–∏–µ2: –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ—á–µ–º—É?
// const a = () => console.log("a");
// const b = () => console.log("b");
// const c = a || b ? a() : b();
// console.log(c);

–í—ã–≤–æ–¥ –±—É–¥–µ—Ç —Ç–∞–∫–∏–º: "a" –∏ "undefined". 
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è "a||b" –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è "a" –∏—Å—Ç–∏–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ "a" —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –ø–æ—ç—Ç–æ–º—É –≤—ã–≤–æ–¥–∏—Ç—Å—è "a". –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ a(), —Ñ—É–Ω–∫—Ü–∏—è "a" –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É "c" –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "undefined".

// –ó–∞–¥–∞–Ω–∏–µ3: –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å—É–º–º—É –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —á–∏—Å–ª–æ. –í—ã–∑–æ–≤–æ–≤ –í–°–ï–ì–î–ê 5

function count(num) {
  if (typeof num !== 'number') {
    return count;
  }

  let sum = num;

  function nextCount(nextNum) {
    if (typeof nextNum === 'number') {
      sum += nextNum;
    }
    return nextCount;
  }

  nextCount.toString = function () {
    return sum;
  };

  return nextCount;
}

console.log(+count(3)(2)(1)(5)(7));
console.log(+count(6)(17)(3)(5)(7));
console.log(+count(3)(null)(1)('asad')());

// –ó–∞–¥–∞–Ω–∏–µ4
// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é convertArrToObj, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –Ω–∞ –≤—ã—Ö–æ–¥ –æ—Ç–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç
// const arr = [1, null, 'test', undefined]
// const obj = convertArrToObj()
// console.log(obj) // { 0: 1, 1: null, 2: 'test', 3: undefined }

function convertArrToObj(arr) {
  const obj = {};
  for (let i = 0; i < arr.length; i++) {
    obj[i] = arr[i];
  }
  return obj;
}

const arr = [1, null, 'test', undefined];
const obj = convertArrToObj(arr);
console.log(obj);

// –ó–∞–¥–∞–Ω–∏–µ5
// –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é countFromArr, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞. –ù–∞ –≤—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –º–∞—Å—Å–∏–≤, –Ω–∞ –≤—ã—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –µ–≥–æ –∫–æ–ª-–≤–æ –≤ –º–∞—Å—Å–∏–≤–µ
// const arr = [1, 1, 1, 'test', 'test']
// const res = countFromArr(arr)
// console.log(res) // { 1: 3, test: 2 }

function countFromArr(arr) {
  const countObj = {};
  for (let i = 0; i < arr.length; i++) {
    const element = arr[i];
    if (countObj[element]) {
      countObj[element] += 1;
    } else {
      countObj[element] = 1;
    }
  }
  return countObj;
}

const arr = [1, 1, 1, 'test', 'test'];
const res = countFromArr(arr);
console.log(res);

// –ó–∞–¥–∞–Ω–∏–µ6
// –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é groupByField, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ù–∞ –≤—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è, –Ω–∞ –≤—ã—Ö–æ–¥ –æ–±—ä–µ–∫—Ç - –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ —Ä–∞–≤–Ω–æ —ç—Ç–æ–º—É –∫–ª—é—á—É ü§™ (–Ω–∞–¥–µ—é—Å—å –≤ –ø—Ä–∏–º–µ—Ä–µ –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–µ–π). –ü—Ä–∏–º–µ—Ä:
// const arr = [{test: 1},{test: 2},{test: 3},{test: 1},{test: 1}]
// const res = groupByField(arr, 'test')
// console.log(res) // { 1: [{test: 1}, {test: 1}, {test: 1}], 2: [{test: 2}], 3: [{test: 3}]}

function groupByField(arr, field) {
  const groupedObj = {};
  for (let i = 0; i < arr.length; i++) {
    const obj = arr[i];
    const value = obj[field];
    if (groupedObj[value]) {
      groupedObj[value].push(obj);
    } else {
      groupedObj[value] = [obj];
    }
  }
  return groupedObj;
}

const arr = [{test: 1},{test: 2},{test: 3},{test: 1},{test: 1}];
const res = groupByField(arr, 'test');
console.log(res);

// –ó–∞–¥–∞–Ω–∏–µ7: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é plus()
// (1).plus(2); // 3

function plus() {
  return this + arguments[0];
}

Number.prototype.plus = plus;

console.log((1).plus(2)); // 3
console.log((7).plus(3)); // 10

---------------------------------
console.log("start");

setTimeout(() => console.log("timeout"), 0);

new Promise((resolve, reject) => {
    console.log("promise constructor");

    reject();
})
    .then(() => console.log("p1"))
    .catch(() => console.log("p2"))
    .catch(() => console.log("p3"))
    .then(() => console.log("p4"))
    .then(() => console.log("p5"));

console.log("final");
---------------------------------
–í –∫–æ–Ω—Å–æ–ª—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Ä–∞–∑–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç IDE, –≤ –æ–¥–Ω–∏—Ö —Å–ª—É—á–∞—è –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç —Ç–∞–∫–∏–º:

start
promise constructor
final
p2
p4
p5

–í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –≤—ã–≤–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º:

start
promise constructor
final
p2
p4
p5
timeout

"timeout" –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ "p5", —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ setTimeout –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö then-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–º–∏—Å–∞.